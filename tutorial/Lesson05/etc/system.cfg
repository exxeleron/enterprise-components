#---------------------------------- system.cfg content -----------------------#
  # Main system configuration file. Contains general system configuration and 
  # definitions of all components used within the system.
  
  # All general configuration fields for etc/system.cfg file are declared in qsl/system.qsd file. 
  # Note that qsd (q schema definition) file contains also default values.
  
  # Additional component-specific fields can be declared in the components' qsd file 
  #  e.g. q:rdb/rdb component has additional rdb-specific configuration declaration in rdb/rdb.qsd 
  # (see components section for examples).

#---------------------------------- env vars from etc/env.sh -----------------#	
  # Mandatory env variables that must be defined in etc/env.sh:
  # EC_ETC_PATH           - path to etc directory containing system.cfg, dataflow.cfg and access.cfg. Must be the same 
  #                         as etcPath field
  # EC_QSL_PATH           - path to qsl library - used for system bootstrapping
  
  # Optional env variables that can be defined in etc/env.sh:
  # EC_SYS_PATH           - root path of the entire system
  # EC_SYS_ID             - system ID
  # EC_SYS_TYPE           - system type - e.g. DEV1, DEV2, QA1, PROD1, PROD2

#---------------------------------- env vars from yak ------------------------#
  # Env variables generated for each process by yak:
  # EC_COMPONENT_ID       - component id in the system, e.g. core.rdb (extracted from subsection name)
  # EC_COMPONENT_INSTANCE - component instance (relevant in case of clones)
  # EC_COMPONENT_PKG      - component package, e.g. rdb (extracted from "type" field in the component subsection)
  # EC_COMPONENT_TYPE     - component type, e.g. rdb (extracted from "type" field in the component subsection)
  #                         Note: type field format "q:EC_COMPONENT_PKG/EC_COMPONENT_TYPE"
  # EC_COMPONENT          - component name, e.g. rdb (extracted from subsection suffix)
  # EC_GROUP              - component group - e.g. core (extracted from "group" section)
  
  # Additional list of fields that should be exported by yak as env variables. 
  # Those variables are used during process bootstrapping - i.e. before full configuration of the system is loaded into 
  # q process.
  # Note that each variable will be prefixed with EC and turned into CAPITAL letters with _ word-separator.
  # e.g: libPath will be exported as EC_LIB_PATH
export = libPath, dllPath, logDest, logPath, logRotate, logLevel, eventPath

#---------------------------------- paths ------------------------------------#
  # Configuration directory, should contain system.cfg, dataflow.cfg and access.cfg files.
etcPath = ${EC_ETC_PATH}

  # Definition of bin path directory, should point to the component sources location.
binPath = ${EC_SYS_PATH}/bin/ec/components/${EC_COMPONENT_PKG}

  # List of directories with libraries
libPath = ${EC_SYS_PATH}/bin/ec/components/${EC_COMPONENT_PKG}, ${EC_SYS_PATH}/bin/ec/libraries/, ${EC_SYS_PATH}/bin/ec/tutorial/Lesson05/src

  # List of directories with binary libraries
dllPath = ${EC_SYS_PATH}/bin/ec/components/${EC_COMPONENT_PKG}, ${EC_SYS_PATH}/bin/ec/libraries/

  # Definition of data root directory, should contain all data generated by processes
dataPath = ${EC_SYS_PATH}/data/${EC_COMPONENT_ID}

  # Definition of log root directory, should contain logs from all processes within the system
logPath = ${EC_SYS_PATH}/log/${EC_COMPONENT_ID}

  # Path for event files - see qsl/event.q for more details.
eventPath = ${EC_SYS_PATH}/data/shared/events/

#---------------------------------- process ----------------------------------#
  # Base port used by the system, all other ports are relative to it.
  # The basePort variable together with $EC_SYS_PATH path allows easy 
  # creation of second running instance of the entire system on the same machine.
basePort = 17000

  # Delay after start command. 
startWait = 0.1

  # Delay after stop command. 
stopWait = 0.1

  # List of cores that are assigned to the process, can be overwritten on group or component level.
cpuAffinity = 0

#---------------------------------- logging ----------------------------------#
  # Logging level - DEBUG, INFO, WARN, ERROR or FATAL
logLevel = INFO

  # Logging destination - FILE, STDERR, STDOUT
logDest = FILE,STDERR

  # Log rotation time
logRotate = 01:00:00

#---------------------------------- housekeeping -----------------------------#
  # Default housekeeping action for all components.
housekeeping = ()

#------------------------------------ security -------------------------------#
  # use specified user flag on all processes (unless redefined somewhere)
uOpt = U
  # use specified user file on all processes (unless redefined somewhere)
  # Each component instance gets it's own user file.
uFile = ${EC_SYS_PATH}/data/shared/security/${EC_COMPONENT_ID}.txt

#---------------------------------- components -------------------------------#
  # Section with the group name, should contain one or more subsections with processes definitions.
  # Subsection should contain definition of components that are part of the group.
  # Subsection headers should contain component id (exported by yak as EC_COMPONENT_ID).
[group:core]

  [[core.gen]]                # Component named 'core.gen' (EC_COMPONENT_ID) - random data generator               
    command = "q gen.q"       # General config field    - command line string to start the q process
    type = q:mock/gen         # General config field    - q component of type 'gen' (EC_COMPONENT_TYPE)
                              #                           from package 'mock' (EC_COMPONENT_PKG)
                              #                           See bin/ec/components/mock/ directory.
    port = ${basePort} + 9    # General config field    - q process port, based on ${basePort}                     
    memCap = 5000             # General config field    - q process memory cap in MB (-w q option) - here 5000 MB  
    cfg.dst = core.tick       # 'gen' proc config field - server name that should be used for data distribution    
  
  [[core.tick]]               # Component named 'core.tick' (EC_COMPONENT_ID) - distribution of high frequency data
    command = "q tickHF.q"    # General config field    - command line string
    type = q:tickHF/tickHF    # General config field    - q component of type 'tickHF' (EC_COMPONENT_TYPE) 
                              #                           from package 'tickHF' (EC_COMPONENT_PKG) 
    port = ${basePort} + 10   # General config field    - port
    memCap = 5000             # General config field    - q process memory cap in MB (-w q option)
  
  [[core.rdb]]                # Component named 'core.rdb' (EC_COMPONENT_ID) - real-time database               
    command = "q rdb.q"       # General config field    - command line string
    type = q:rdb/rdb          # General config field    - q component of type 'rdb' (EC_COMPONENT_TYPE)
                              #                           from package 'rdb' (EC_COMPONENT_PKG)  
    port = ${basePort} + 11   # General config field    - port 
    memCap = 10000            # General config field    - q process memory cap in MB (-w q option)

  [[core.hdb]]                # Component named 'core.hdb' (EC_COMPONENT_ID) - historical database               
    command = "q hdb.q"       # General config field    - command line string
    type = q:hdb/hdb          # General config field    - q component of type 'hdb' (EC_COMPONENT_TYPE) 
                              #                           from package 'hdb' (EC_COMPONENT_PKG)      
    port = ${basePort} + 12   # General config field    - port 
    memCap = 10000            # General config field    - q process memory cap in MB (-w q option)

[group:access]

  [[access.ap]]                         # Component named 'access.ap' (EC_COMPONENT_ID) - access point for the users, contains business logic
    libs = demolib/queries              # - loading custom library "demolib/queries.q" with custom queries.
    command = "q accessPoint.q"         # - command line string
    type = q:accessPoint/accessPoint    # - q component of type 'accessPoint' (EC_COMPONENT_TYPE) 
                                        #   from package 'accessPoint' (EC_COMPONENT_PKG)      
    port = ${basePort} + 50             # - port 
    memCap = 5000                       # - q process memory cap in MB (-w q option)
    cfg.serverAux = core.rdb, core.hdb  # - list of servers that will be used by the accessPoint queries

[group:admin]
  [[admin.genPass]]         # component 'admin.genPass' (EC_COMPONENT_ID) used for
                            # interactive password generation
    uOpt = NULL             # uOpt and uFile cannot be set on this component. Redefining
    uFile = NULL            # those values here.
    port = 0                # port field has no default value. In order to run process
                            # without port, set it to zero
    type = b:authentication/authentication
    command = "q genPass.q"

  [[admin.refreshUFiles]]   # component 'admin.refreshUFiles' (EC_COMPONENT_ID) refreshing
                            # user files
    uOpt = NULL
    uFile = NULL
    port = 0
    type = b:authentication/authentication
    command = "q refreshUFiles.q"


#-----------------------------------------------------------------------------#
	
